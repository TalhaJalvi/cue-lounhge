I18n.setPluralRule('en', function pluralizeEN(n) { var i=Math.floor(Math.abs(n)),v=n.toString().replace(/^[^.]*\.?/,"").length;if(typeof n==="string")n=parseInt(n,10);if(i===1&&v===0)return"one";return"other" });I18n.configure({"locale":"en_US","country":"US","brandId":"livingsocial","translations":{"js":{"modules":{"deals":{"view_deal":"View Deal","buy":"Buy","gridHeading":"{{singularCategory}} Deals","personalizeTheseDeals":"Personalize these deals","loading":"Loading ...","noDealsMessage":"Our deal searchers couldn't find any {{typeOfDeals}} deals at the moment.","noDealsSuggestion":"They feel bad, so they found you these other deals to make up for it."},"neighborhoods":{"backTo":"Back to","hide":"Hide","show":"Show"},"seo-platform-editorial":{"readLess":"Read Less","readMore":"Read More","relatedContent":"Related Reads","widgetTitle":{"brandSpecific":true,"generic":"Gemini Guide","groupon":"Groupon Guide","livingsocial":"LivingSocial Guide","gemini":"LivingSocial Guide"}},"events":{"deal_map_info_window":{"no_deal_available":"No Deal Available"},"nearby_deal_title":"View All","view_website":"View Website"}}},"number":{"symbols":{"decimal":".","group":",","list":";","percentSign":"%","plusSign":"+","minusSign":"-","exponential":"E","superscriptingExponent":"×","perMille":"‰","infinity":"∞","nan":"NaN","currency":{"EUR":"€","XCD":"EC$","ARS":"$","USD":"$","AUD":"A$","BBD":"$","BDT":"৳","XOF":"CFA","BMD":"$","BND":"$","BRL":"R$","BSD":"$","BYR":"р.","BZD":"$","CAD":"C$","XAF":"FCFA","NZD":"NZ$","CLP":"$","CNY":"CN¥","COP":"$","CRC":"₡","CUP":"$","DOP":"$","FJD":"$","GBP":"£","GHS":"₵","GIP":"£","GYD":"$","HKD":"HK$","ILS":"₪","INR":"₹","JMD":"$","JPY":"¥","KHR":"៛","KRW":"₩","KYD":"$","KZT":"₸","LAK":"₭","LRD":"$","MNT":"₮","MXN":"MX$","NAD":"$","XPF":"CFPF","NGN":"₦","PHP":"₱","PLN":"zł","PYG":"₲","SBD":"$","SGD":"$","SRD":"$","SSP":"£","THB":"฿","TRY":"₺","TTD":"$","TWD":"NT$","UAH":"₴","UYU":"$","VND":"₫"}},"formats":{"scientific":"#E0","decimal":"#,##0.###","currency":"¤#,##0.00","percent":"#,##0%"},"defaultCurrency":"USD"}},"scope":"js"});I18n.mixin=function mixinL10nHelpers(viewCtx, _i18n) { var deprecate; if (typeof nodeDeprecate === 'undefined') { deprecate = function id(fn) { return fn; }; } else { deprecate = nodeDeprecate; } var findKeyPath = deprecate(function findKeyPath(obj, keyPath) { keyPath.split('.').forEach(function getProperty(keyPart) { if (obj == null || typeof obj !== 'object') return; obj = obj[keyPart]; }); return JSON.stringify(obj != null ? obj : null); }, [ 'nested {{mustache}} tags in {{#t}} sections are deprecated and will be removed', 'in a future version of itier-localization; please replace this code with presenter logic', ].join(' ')); var TRANSLATED_ATTRIBUTES = { alt: true, height: true, width: true, }; var PLACEHOLDER = /(?:\{\{|%\{)\s*(.*?)\s*(?:\}\}?)/gm; var HTML_ESCAPE = { '"': '&quot;', '<': '&lt;', '>': '&gt;', }; var HTML_ESCAPE_REGEXP = /["<>]/g; function isNumber(n) { return !isNaN(parseFloat(n)) && isFinite(n); } if (viewCtx == null) { viewCtx = {}; } if (!_i18n && typeof I18n !== 'undefined') { _i18n = I18n; /* global I18n */ } viewCtx.locale = _i18n.locale; viewCtx.country = _i18n.country; viewCtx.lang = _i18n.lang; var version = (_i18n.translations && _i18n.translations.$checksum) || undefined; var baseString = 'country=' + _i18n.country + '&locale=' + _i18n.locale + '&brand=' + _i18n.brandId; viewCtx.clientSideTranslationQueryString = version ? baseString + '&version=' + version.substr(0, 10) : baseString; viewCtx.translate = function translate() { return function apply(text) { var opts; var self = this; var args = text.split(','); var key = args.shift().replace(/\s+/g, ''); if (args.length) { args = args .join(',') .trim() .replace(PLACEHOLDER, function resolveKeyPath(_, keyPath) { return findKeyPath(self, keyPath); }); try { opts = JSON.parse( args.replace(/^\s*([^{\s][\S\s]*[^\s])\s*$/, '{$1}') ); } catch (err) { err.message += ' in translate-options for key ' + key; throw err; } } return _i18n.t(key, opts != null ? opts : {}); }; }; viewCtx.t = viewCtx.translate; viewCtx.translateimg = function translateimg() { return function apply(json) { var imgAttrs = []; var hash = JSON.parse(json); for (var key in hash) { var value = hash[key]; if (TRANSLATED_ATTRIBUTES[key]) { if (!isNumber(value)) { value = _i18n .t(value) .toString() .replace(HTML_ESCAPE_REGEXP, function toEscaped(specialChar) { return HTML_ESCAPE[specialChar]; }); } } else if (key === 'src') { value = '/images/' + _i18n.locale + '/' + value; } imgAttrs.push(key + '="' + value + '"'); } imgAttrs = imgAttrs.join(' '); return '<img ' + imgAttrs + '/>'; }; }; return viewCtx; }